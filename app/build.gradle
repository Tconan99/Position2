apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../key/debug.keystore')
            storePassword 'android'
        }
        release {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../key/debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        applicationId "com.jc.position2"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.google.code.gson:gson:2.6.1'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'org.projectlombok:lombok:1.16.+'
    compile 'im.fir:fir-sdk:latest.integration@aar'
}

android.applicationVariants.all { variant ->
    def buildType = variant.buildType
    def encoding = "utf-8"
    if (buildType.applicationIdSuffix) {
        //def defaultPackageId = variant.packageName.replaceAll(buildType.applicationIdSuffix,'')
        variant.mergeResources.doLast {
            def f = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            String content = f.getText(encoding)
            content = content.replaceAll('手机签到','手机Beta签到')
            f.write(content,encoding)
        }
    }
}
